// Red neuronal para predecir enfermedades cardíacas

// Parámetros de la red
n_entradas = 13;   // Número de entradas
n_ocultas = 10;    // Neuronas en la capa oculta
n_salidas = 4;     // Neuronas en la capa de salida

// Función de activación sigmoide y su derivada
function y = sigmoid(x)
    y = 1 ./ (1 + exp(-x));
endfunction

function y = sigmoid_derivada(x)
    y = sigmoid(x) .* (1 - sigmoid(x));
endfunction

// Cargar datos desde el archivo
datos = read("reprocessed.hungarian.data", -1, 14);
X = datos(:, 1:13);    // Características de entrada
Y_raw = datos(:, 14);  // Etiqueta de salida

// Reemplazar valores -9 por la media de la columna
for i = 1:n_entradas
    col = X(:, i);
    media = mean(col(col <> -9));
    X(col == -9, i) = media;
end

// Convertir etiquetas en formato one-hot
Y = zeros(size(Y_raw, 1), n_salidas);
for i = 1:size(Y_raw, 1)
    if Y_raw(i) > 0 then
        Y(i, Y_raw(i)) = 1;
    end
end

// Inicializar pesos y sesgos
W1 = rand(n_entradas, n_ocultas);
b1 = rand(1, n_ocultas);
W2 = rand(n_ocultas, n_salidas);
b2 = rand(1, n_salidas);

// Hiperparámetros
tasa_aprendizaje = 0.1;
max_iter = 1000;

// Entrenamiento
for iter = 1:max_iter
    b1_exp = repmat(b1, size(X,1), 1);
    Z1 = X * W1 + b1_exp;
    A1 = sigmoid(Z1);

    b2_exp = repmat(b2, size(X,1), 1);
    Z2 = A1 * W2 + b2_exp;
    A2 = sigmoid(Z2);

    error = Y - A2;

    // Retropropagación
    dZ2 = error .* sigmoid_derivada(Z2);
    dW2 = A1' * dZ2;
    db2 = sum(dZ2, 1);

    dZ1 = (dZ2 * W2') .* sigmoid_derivada(Z1);
    dW1 = X' * dZ1;
    db1 = sum(dZ1, 1);

    // Actualizar pesos y sesgos
    W2 = W2 + tasa_aprendizaje * dW2;
    b2 = b2 + tasa_aprendizaje * db2;
    W1 = W1 + tasa_aprendizaje * dW1;
    b1 = b1 + tasa_aprendizaje * db1;
end

// Predicciones
b1_exp = repmat(b1, size(X,1), 1);
b2_exp = repmat(b2, size(X,1), 1);
Y_pred = sigmoid(sigmoid(X * W1 + b1_exp) * W2 + b2_exp);

disp("Predicciones:");
disp([X, fix(Y_pred+0.5)]);
