<!DOCTYPE html>
<html>
<head>
  <title>Perceptrón con Datos Linealmente Separables</title>
  <style>
    canvas { border: 1px solid black; }
  </style>
</head>
<body>
  <h2>Perceptrón: Clasificación de 40 puntos</h2>
  <canvas id="canvas" width="600" height="600"></canvas>
  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    // Generar 40 puntos linealmente separables
    const points = [];
    for (let i = 0; i < 40; i++) {
      const x = Math.random() * 2 - 1;
      const y = Math.random() * 2 - 1;
      const label = y > x ? 1 : -1;
      points.push({ x, y, label });
    }

    // Separar datos en conjunto de entrenamiento (70%) y prueba (30%)
    const trainingSet = points.slice(0, 28);
    const testSet = points.slice(28);

    // Inicializar pesos del perceptrón
    let weights = [Math.random(), Math.random()];
    let bias = Math.random();
    const learningRate = 0.1;

    // Entrenar perceptrón
    for (let epoch = 0; epoch < 100; epoch++) {
      trainingSet.forEach(p => {
        const sum = weights[0] * p.x + weights[1] * p.y + bias;
        const prediction = sum >= 0 ? 1 : -1;
        const error = p.label - prediction;
        weights[0] += learningRate * error * p.x;
        weights[1] += learningRate * error * p.y;
        bias += learningRate * error;
      });
    }

    // Función para transformar coordenadas
    function toCanvas(x, y) {
      return {
        cx: (x + 1) * 300,
        cy: 600 - (y + 1) * 300
      };
    }

    // Dibujar puntos
    function drawPoints(set, color) {
      set.forEach(p => {
        const { cx, cy } = toCanvas(p.x, p.y);
        ctx.beginPath();
        ctx.arc(cx, cy, 5, 0, 2 * Math.PI);
        ctx.fillStyle = p.label === 1 ? color[0] : color[1];
        ctx.fill();
      });
    }

    // Dibujar línea de decisión
    function drawDecisionBoundary() {
      const x1 = -1, x2 = 1;
      const y1 = (-bias - weights[0] * x1) / weights[1];
      const y2 = (-bias - weights[0] * x2) / weights[1];
      const p1 = toCanvas(x1, y1);
      const p2 = toCanvas(x2, y2);
      ctx.beginPath();
      ctx.moveTo(p1.cx, p1.cy);
      ctx.lineTo(p2.cx, p2.cy);
      ctx.strokeStyle = 'black';
      ctx.stroke();
    }

    drawPoints(trainingSet, ['blue', 'red']);
    drawPoints(testSet, ['lightblue', 'lightcoral']);
    drawDecisionBoundary();
  </script>
</body>
</html>
